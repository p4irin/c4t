# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - LICENSE

pr:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - LICENSE
  
stages:
  - stage: CI
    jobs:
      - job: BuildAndTest
        pool:
          vmImage: ubuntu-latest
        strategy:
          matrix:
            Python38:
              python.version: '3.8'
            Python39:
              python.version: '3.9'
            Python310:
              python.version: '3.10'

        variables:
          # variables are automatically exported as environment variables
          # so this will override pip's default cache dir
          - name: pip_cache_dir
            value: $(Pipeline.Workspace)/.pip

        steps:
          - task: Cache@2
            inputs:
              key: 'pip | "$(Agent.OS)"'
              restoreKeys: |
                pip | "$(Agent.OS)"
              path: $(pip_cache_dir)
            displayName: Cache pip installs

          - task: Cache@2
            inputs:
              key: 'c4t-assets | "$(Agent.OS)"'
              restoreKeys: |
                c4t-assets | "$(Agent.OS)"
              path: ${HOME}/.c4t-assets
            displayName: Cache assets directory

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - script: |
              python -m pip install --upgrade pip
              python -m pip install -e ".[lint,test]"
            displayName: 'Install project and test dependencies'

          - script: |
              python -m mypy src/
            displayName: 'Static type checking'

          - script: |
              python -m ruff check
            displayName: 'Ruff it'

          - script: |
              python -m pytest -v --junitxml=junit.xml --cov src/c4t/ --cov-report xml tests/*
            displayName: 'Run tests and report code coverage'
            condition: succeeded()

          - task: PublishTestResults@2
            condition: succeeded()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: './junit.xml'
            displayName: 'Publish test results to Azure Pipelines'

          - task: PublishCodeCoverageResults@2
            condition: succeeded()
            inputs:
              summaryFileLocation: './coverage.xml'
            displayName: 'Publish code coverage results to Azure Pipelines'

      - job: 'BuildAndPublishArtifactsToPipeline'
        pool:
          vmImage: ubuntu-latest
        strategy:
          matrix:
            Python38:
              python.version: '3.8'
        dependsOn: BuildAndTest
        condition: succeeded()

        variables:
          - name: pip_cache_dir
            value: $(Pipeline.Workspace)/.pip

        steps:
          - task: Cache@2
            inputs:
              key: 'pip | "$(Agent.OS)"'
              restoreKeys: |
                pip | "$(Agent.OS)"
              path: $(pip_cache_dir)
            displayName: Cache pip installs
            
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - script: |
              python -m pip install ".[package]"
            displayName: 'Install dependencies to package project'            

          - script: |
              python -m build
            displayName: 'Build distribution packages'
            condition: succeeded()

          - task: CopyFiles@2
            inputs:
              contents: dist/*
              targetFolder: $(Build.ArtifactStagingDirectory)/dist
            displayName: 'Copy artifacts to push to pipeline'

          - publish: '$(Build.ArtifactStagingDirectory)/dist'
            displayName: 'Publish artifacts to pipeline'
            artifact: drop
      
      - job: PublishArtifactsToAzureArtifacts
        pool:
          vmImage: ubuntu-latest
        strategy:
          matrix:
            Python38:
              python.version: '3.8'
        dependsOn: 'BuildAndPublishArtifactsToPipeline'
        condition: >
          and(
          succeeded(),
          eq(variables['Build.SourceBranch'], 'refs/heads/master')
          )
        
        variables:
          - name: pip_cache_dir
            value: $(Pipeline.Workspace)/.pip

        steps:
          - task: Cache@2
            inputs:
              key: 'pip | "$(Agent.OS)"'
              restoreKeys: |
                pip | "$(Agent.OS)"
              path: $(pip_cache_dir)
            displayName: Cache pip installs
            
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - script: |
              python -m pip install ".[package]"
            displayName: 'Install dependencies to upload package to Azure Artifacts'

          - download: current
            artifact: drop

          - task: TwineAuthenticate@1
            displayName: Twine Authenticate
            inputs:
              artifactFeed: p4irin

          - script: |
              python -m twine upload -r p4irin --verbose --skip-existing --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/drop/dist/*
            displayName: Upload artifacts to Azure Artifacts
